#include <iostream>
using namespace std;

#include <ctime>
// Eigen Core
#include <Eigen/Core>
// Algebraic operations of dense matrices (e.g inverse, eigenvalues, etc.)
#include <Eigen/Dense>
using namespace Eigen;

#define MATRIX_SIZE 50


int main(int argc, char **argv) {
    
    // All vectors and matrixes in Eigen are Eigen::Matrix, which is a template class
    // First three parameters are: data type, row and column
    // e.g. Declaring a 2x3 float matrix
    Matrix<float, 2, 3> matrix_23;

    // Eigen also provides many built-in tupes via typedef, but the bottom layer is still Eigen::Matrix
    // e.g. Vector3d 
    Vector3d v_3d;
    // which is equivalent to Eigen::Matrix<double, 3, 1>
    Matrix<float, 3, 1> vd_3d;

    
    // e.g. Matrix3d, which is equivalent to Matrix<double, 3, 3> 
    Matrix3d matrix_33 = Matrix3d::Zero(); // intialized to zero
    
    // e.g. Matrix with dynamic size if not sure about the size
    Matrix<double, Dynamic, Dynamic> matrix_dynamic;
    // or simpler version
    MatrixXd matrix_x;

    // Operations of Eigen matrix
    // input data (intialization)
    matrix_23 << 1, 2, 3, 4, 5, 6;
    // output 
    cout << "matrix 2x3 from 1 to 6: \n" << matrix_23 << endl;

    // using loop to access elements in the matrix
    cout << "print matrix 2x3" << endl;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            cout << matrix_23(i, j) << "\t";
        }
        cout << endl;

    }

    // multiplication of matrix with vector 
    v_3d << 3, 2, 1;
    vd_3d << 4, 5, 6;

    // In Eigen, YOU CAN'T MIX TWO DIFFERENT TYPES OF MATRICES
    // Matrix<double, 2, 1> wrong_result = matrix_23 * v_3d --> this is wrong
    // It should be explicitly converted
    Matrix<double, 2, 1> result = matrix_23.cast<double>() * v_3d;
    cout << "[1,2,3,4,5,6] * [3,2,1] = " << result.transpose() << endl;

    Matrix<float, 2, 1> result2 = matrix_23 * vd_3d;
    cout << "[1,2,3,4,5,6] * [4,5,6] = " << result2.transpose() << endl;

    // Also, YOU CAN'T MISJUDGE THE DIMENSIONS OF THE MATRIX
    // Try canceling the comments below to see what Eigen will report
    // Eigen::Matrix<double, 2, 3> result_wrong_dimension = matrix_23.cast<double>() * v_3d;

    // some matrix operations (basic operations +-*/ are not demonstrated)
    matrix_33 = Matrix3d::Random(); 
    cout << "random matrix: \n" << matrix_33 << endl; 
    cout << "transpose: \n" << matrix_33.transpose() << endl;
    cout << "sum: " << matrix_33.sum() << endl;
    cout << "trace: " << matrix_33.trace() << endl;
    cout << "times 10: \n" << 10 * matrix_33 << endl;
    cout << "inverse: \n" << matrix_33.inverse() << endl;
    cout << "det: " << matrix_33.determinant() << endl;

    // Eigenvalues
    // Real symmetric matrix can guarantee successful diagonalization
    SelfAdjointEigenSolver<Matrix3d> eigen_solver(matrix_33.transpose() * matrix_33);
    cout << "Eigen values = \n" << eigen_solver.eigenvalues() << endl;
    cout << "Eigen vectors = \n" << eigen_solver.eigenvectors() << endl;

    // Solving equations 
    // matrix_NN * x = v_Nd
    // The siz of N is defined in the previous macro, which is generated by a random number
    // Direct inversion in the most direct, but the amount of inverse operation is large 

    Matrix<double, MATRIX_SIZE, MATRIX_SIZE> matrix_NN = MatrixXd::Random(MATRIX_SIZE, MATRIX_SIZE);
    matrix_NN = matrix_NN * matrix_NN.transpose(); // Guarantee semi-positive definte 
    Matrix<double, MATRIX_SIZE, 1> v_Nd = MatrixXd::Random(MATRIX_SIZE, 1);

    clock_t time_stt = clock(); // timing
    // Direct inversion
    Matrix<double, MATRIX_SIZE, 1> x = matrix_NN.inverse() * v_Nd;
    cout << "Time of normal inverse is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl;
    cout << "x = " << x.transpose() << endl;

    // Usually solved by matrix decomposition, such as QR decomposition
    // the speed will be much faster
    time_stt = clock();
    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);
    cout << "Time of QR decomposition is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl;
    cout << "x = " << x.transpose() << endl;

    // For positive definite matrices, you can also use cholesky decomoisition to solve equation
    time_stt = clock();
    x = matrix_NN.ldlt().solve(v_Nd);
    cout << "Time of QR decomposition is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl;
    cout << "x = " << x.transpose() << endl;

    return 0;
}